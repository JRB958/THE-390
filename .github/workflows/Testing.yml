name: Testing 
# This workflows simulates an environment to test the entire application using unit testing, integration testing and system testing.
on: [push]
jobs:
  publish:
    name: Publish the release version
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout the repository and the branch
        uses: actions/checkout@v2

      # Install frontend entrance dependencies and start server
      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm ci
          npm start &

      # Install backend dependencies and start server
      - name: Create python environment
        working-directory: ./backend
        run: python -m venv venv

      - name: Activate python environment
        working-directory: ./backend
        run: source venv/bin/activate

      - name: Install backend dependencies
        working-directory: ./backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_STORAGE_BUCKET_NAME: ${{secrets.AWS_STORAGE_BUCKET_NAME}}
          AWS_S3_REGION_NAME: ${{secrets.AWS_S3_REGION_NAME}}
        run: | 
            echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
            echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
            pip install --no-cache-dir -r requirements.txt

      - name: Start backend server
        working-directory: ./backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_STORAGE_BUCKET_NAME: ${{secrets.AWS_STORAGE_BUCKET_NAME}}
          AWS_S3_REGION_NAME: ${{secrets.AWS_S3_REGION_NAME}}
        run: |
            echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
            echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
            python manage.py runserver &

    # Install Cypress and run tests
      - name: Install Cypress
        working-directory: ./frontend
        run: npm install cypress --save-dev

      # # Run Unit tests Django (Backend)
      # - name: Run Unit tests Django
      #   working-directory: ./backend
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      #     AWS_STORAGE_BUCKET_NAME: ${{secrets.AWS_STORAGE_BUCKET_NAME}}
      #     AWS_S3_REGION_NAME: ${{secrets.AWS_S3_REGION_NAME}}
      #   run: |
      #       echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
      #       echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
      #       coverage run manage.py test 
      #       coverage report --omit '*/dist-packages/*' > coverage_report.json

      # Save coverage report to repository
      - name: Save coverage report 
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: ./backend/coverage_report.json

          
      - name: Checkout the repository and the branch
        uses: actions/checkout@v4

     # Install frontend entrance dependencies and start server
      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm ci

      
      # Run Unit tests Jest (Frontend)
      - name: Run Unit Tests (Frontend)
        working-directory: ./frontend
        run: |
             npm run coverage > jest-report.json
             cat jest-report.json > README.md
             cd ..
             git init
             git branch
             git pull origin 
             git status
             git config --local user.email "github-actions[bot]@users.noreply.github.com"
             git config --local user.name "github-actions[bot]"
             touch frontend/README.md
             git add frontend/README.md
             git commit -m "initial commit"
             git push origin --force

      # # Save Jest tests as artifacts
      # - name: Save Jest report
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: jest-report
      #     path: ./frontend/jest-report.json

      # # Run Integration Tests (Backend)
      # - name: Run Integration Tests (Backend)
      #   working-directory: ./backend
      #   run: echo " Implementation not made yet "

      # # Run Integration Tests (Frontend)
      # - name: Run Integration Tests (Frontend)
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   working-directory: ./frontend
      #   run: echo " Implementation not made yet "

      # - name: Run System tests
      #   working-directory: ./frontend
      #   run: npx cypress run 

      # # Save Cypress tests as artifacts
      # - name: Save Cypress report
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: cypress-report
      #     path: ./frontend/reports_cypress.json

      # - name: Checkout the repository and the branch
      #   uses: actions/checkout@v4
          
      # - name: Add coverage_report.json
      #   run: |
      #       cd frontend 
      #       ls
      #       cat jest_report.json > README.md
      #       git init
      #       git branch
      #       git pull origin 
      #       git status
      #       git config --local user.email "github-actions[bot]@users.noreply.github.com"
      #       git config --local user.name "github-actions[bot]"
      #       touch myfile.txt
      #       git add myfile.txt
      #       git commit -m "initial commit"
      #       git push origin --force



      

      
